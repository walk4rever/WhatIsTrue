"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/verify";
exports.ids = ["pages/api/verify"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fverify&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fverify.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fverify&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fverify.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_verify_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/pages/api/verify.ts */ \"(api-node)/./src/pages/api/verify.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_verify_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_verify_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_verify_ts__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_verify_ts__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/verify\",\n        pathname: \"/api/verify\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_verify_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGdmVyaWZ5JnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGc3JjJTJGcGFnZXMlMkZhcGklMkZ2ZXJpZnkudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDc0Q7QUFDdEQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHFEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxxREFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3NyYy9wYWdlcy9hcGkvdmVyaWZ5LnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS92ZXJpZnlcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS92ZXJpZnlcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiAnJyxcbiAgICAgICAgZmlsZW5hbWU6ICcnXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fverify&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fverify.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/verify.ts":
/*!*********************************!*\
  !*** ./src/pages/api/verify.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formidable */ \"formidable\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([formidable__WEBPACK_IMPORTED_MODULE_0__]);\nformidable__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Configure to not parse the request body automatically\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    try {\n        // Parse the form data - update for new formidable API\n        const options = {\n            keepExtensions: true\n        };\n        console.log(\"Parsing form data...\");\n        const formData = await new Promise((resolve, reject)=>{\n            const form = (0,formidable__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(options);\n            form.parse(req, (err, fields, files)=>{\n                if (err) {\n                    console.error(\"Form parsing error:\", err);\n                    return reject(err);\n                }\n                console.log(\"Fields received:\", fields);\n                console.log(\"Files received:\", files);\n                return resolve({\n                    fields,\n                    files\n                });\n            });\n        });\n        const { fields, files } = formData;\n        // Process based on content type - handle array format from formidable v4+\n        const contentTypeField = fields.contentType;\n        const contentType = Array.isArray(contentTypeField) ? contentTypeField[0] : contentTypeField;\n        if (!contentType) {\n            console.error(\"Missing content type in request\");\n            return res.status(400).json({\n                error: 'Missing content type'\n            });\n        }\n        console.log(`Processing content type: ${contentType}`);\n        let verificationResult;\n        if (contentType === 'text') {\n            const textContentField = fields.textContent;\n            const textContent = Array.isArray(textContentField) ? textContentField[0] : textContentField;\n            if (!textContent) {\n                console.error(\"Missing text content for text verification\");\n                return res.status(400).json({\n                    error: 'Missing text content'\n                });\n            }\n            verificationResult = await verifyTextContent(textContent);\n        } else if (contentType === 'url') {\n            const urlField = fields.url;\n            const url = Array.isArray(urlField) ? urlField[0] : urlField;\n            if (!url) {\n                console.error(\"Missing URL for URL verification\");\n                return res.status(400).json({\n                    error: 'Missing URL'\n                });\n            }\n            verificationResult = await verifyUrl(url);\n        } else if (contentType === 'file') {\n            const fileField = files.file;\n            const file = Array.isArray(fileField) ? fileField[0] : fileField;\n            if (!file) {\n                console.error(\"Missing file for file verification\");\n                return res.status(400).json({\n                    error: 'No file uploaded'\n                });\n            }\n            verificationResult = await verifyFile(file);\n        } else {\n            console.error(`Invalid content type: ${contentType}`);\n            return res.status(400).json({\n                error: 'Invalid content type'\n            });\n        }\n        // Return result\n        return res.status(200).json(verificationResult);\n    } catch (error) {\n        console.error('Error processing verification request:', error);\n        return res.status(500).json({\n            error: 'Error processing verification request'\n        });\n    }\n}\n// Text verification function\nasync function verifyTextContent(text) {\n    // Analyze the text for truthfulness\n    // Keywords check for demonstration purposes\n    // In a real-world implementation, you would use NLP or ML models\n    const misleadingKeywords = [\n        'fake',\n        'hoax',\n        'conspiracy',\n        'debunked',\n        'clickbait',\n        'shocking truth',\n        'they don\\'t want you to know',\n        'mainstream media won\\'t tell you',\n        'secret',\n        'hidden',\n        'cover-up',\n        'truth revealed'\n    ];\n    const credibleKeywords = [\n        'research',\n        'study',\n        'evidence',\n        'proven',\n        'verified',\n        'source',\n        'published',\n        'peer-reviewed',\n        'expert',\n        'data shows',\n        'statistics',\n        'analysis',\n        'according to experts',\n        'scientific',\n        'journal'\n    ];\n    const neutralKeywords = [\n        'reportedly',\n        'allegedly',\n        'claimed',\n        'according to',\n        'seemingly',\n        'possibly',\n        'potentially',\n        'suggests',\n        'may indicate',\n        'could be'\n    ];\n    // Convert text to lowercase for case-insensitive comparison\n    const lowerText = text.toString().toLowerCase();\n    // Count occurrences of keywords\n    const misleadingCount = misleadingKeywords.reduce((count, keyword)=>count + (lowerText.includes(keyword) ? 1 : 0), 0);\n    const credibleCount = credibleKeywords.reduce((count, keyword)=>count + (lowerText.includes(keyword) ? 1 : 0), 0);\n    const neutralCount = neutralKeywords.reduce((count, keyword)=>count + (lowerText.includes(keyword) ? 1 : 0), 0);\n    // Text analysis metrics\n    const textLength = text.toString().length;\n    const hasAdequateLength = textLength > 100;\n    // Check for exaggerated language (excessive punctuation)\n    const exclamationCount = (text.toString().match(/!/g) || []).length;\n    const questionCount = (text.toString().match(/\\?/g) || []).length;\n    const excessivePunctuation = exclamationCount + questionCount > text.toString().length / 50;\n    // Check for ALL CAPS sections (often used in sensational content)\n    const capsRegex = /[A-Z]{5,}/g;\n    const capsMatches = text.toString().match(capsRegex) || [];\n    const hasExcessiveCaps = capsMatches.length > 0;\n    // Check for balanced presentation (looking for \"but\", \"however\", etc.)\n    const balancingTerms = [\n        \"however\",\n        \"but\",\n        \"on the other hand\",\n        \"conversely\",\n        \"nevertheless\"\n    ];\n    const balancingTermCount = balancingTerms.reduce((count, term)=>count + (lowerText.includes(term) ? 1 : 0), 0);\n    const hasPerspectiveBalance = balancingTermCount > 0;\n    // Calculate confidence score (in a real app, this would use ML/AI)\n    let confidenceScore = 0.5; // Start at neutral\n    // Adjust based on keyword presence\n    confidenceScore += credibleCount * 0.08;\n    confidenceScore -= misleadingCount * 0.12;\n    confidenceScore -= neutralCount * 0.03;\n    // Adjust for text structure features\n    if (!hasAdequateLength) {\n        confidenceScore -= 0.1;\n    }\n    if (excessivePunctuation) {\n        confidenceScore -= 0.07;\n    }\n    if (hasExcessiveCaps) {\n        confidenceScore -= 0.08;\n    }\n    if (hasPerspectiveBalance) {\n        confidenceScore += 0.09;\n    }\n    // Cap the score between 0 and 1\n    confidenceScore = Math.max(0, Math.min(1, confidenceScore));\n    // Generate assessment based on score and detected patterns\n    let assessment = \"\";\n    let details = [];\n    // Create analysis details based on what we detected\n    let analysisDetails = [];\n    if (credibleCount > 0) {\n        analysisDetails.push({\n            point: `References credible information sources (${credibleCount} references)`,\n            confidence: 0.7 + credibleCount * 0.05\n        });\n    }\n    if (misleadingCount > 0) {\n        analysisDetails.push({\n            point: `Contains potential misinformation indicators (${misleadingCount} detected)`,\n            confidence: 0.7\n        });\n    }\n    if (!hasAdequateLength) {\n        analysisDetails.push({\n            point: \"Text is too short to provide adequate context\",\n            confidence: 0.85\n        });\n    }\n    if (excessivePunctuation) {\n        analysisDetails.push({\n            point: \"Uses sensational punctuation patterns often found in misleading content\",\n            confidence: 0.75\n        });\n    }\n    if (hasExcessiveCaps) {\n        analysisDetails.push({\n            point: \"Contains excessive capitalization, often used for exaggeration\",\n            confidence: 0.8\n        });\n    }\n    if (hasPerspectiveBalance) {\n        analysisDetails.push({\n            point: \"Presents multiple perspectives, indicating balanced reporting\",\n            confidence: 0.85\n        });\n    }\n    if (neutralCount > 2) {\n        analysisDetails.push({\n            point: \"Uses cautious language, avoiding absolute claims\",\n            confidence: 0.7\n        });\n    }\n    // Set the high-level assessment based on confidence score\n    if (confidenceScore >= 0.8) {\n        assessment = \"This content appears to be highly factual and reliable\";\n        // Select the most relevant details or use our analysis details\n        details = analysisDetails.length >= 3 ? analysisDetails.slice(0, 3) : [\n            {\n                point: \"Contains credible information and context\",\n                confidence: confidenceScore\n            },\n            {\n                point: \"Uses precise language and factual statements\",\n                confidence: confidenceScore + 0.05\n            },\n            {\n                point: \"No significant indicators of misinformation detected\",\n                confidence: confidenceScore + 0.1\n            }\n        ];\n    } else if (confidenceScore >= 0.6) {\n        assessment = \"This content appears to be mostly factual with some uncertainties\";\n        // Select the most relevant details or use our analysis details\n        details = analysisDetails.length >= 3 ? analysisDetails.slice(0, 3) : [\n            {\n                point: \"Contains generally reliable information\",\n                confidence: confidenceScore\n            },\n            {\n                point: \"Some claims may require additional verification\",\n                confidence: confidenceScore - 0.1\n            },\n            {\n                point: \"Presents a relatively balanced perspective\",\n                confidence: confidenceScore + 0.05\n            }\n        ];\n    } else if (confidenceScore >= 0.4) {\n        assessment = \"This content contains a mix of factual and questionable information\";\n        // Select the most relevant details or use our analysis details\n        details = analysisDetails.length >= 3 ? analysisDetails.slice(0, 3) : [\n            {\n                point: \"Some claims appear to be accurate\",\n                confidence: confidenceScore + 0.1\n            },\n            {\n                point: \"Contains potentially misleading statements\",\n                confidence: confidenceScore - 0.1\n            },\n            {\n                point: \"Additional context and verification recommended\",\n                confidence: confidenceScore - 0.05\n            }\n        ];\n    } else {\n        assessment = \"This content contains potentially misleading or inaccurate information\";\n        // Select the most relevant details or use our analysis details\n        details = analysisDetails.length >= 3 ? analysisDetails.slice(0, 3) : [\n            {\n                point: \"Contains language often associated with misinformation\",\n                confidence: 0.7\n            },\n            {\n                point: \"Makes claims without adequate supporting evidence\",\n                confidence: 0.8\n            },\n            {\n                point: \"Significant fact-checking is recommended\",\n                confidence: 0.9\n            }\n        ];\n    }\n    // Calculate overall confidence and cap between 0-1\n    details.forEach((detail)=>{\n        detail.confidence = Math.max(0, Math.min(1, detail.confidence));\n    });\n    return {\n        confidenceScore,\n        assessment,\n        details\n    };\n}\n// URL verification function\nasync function verifyUrl(url) {\n    // In a real app, you would fetch the URL content and analyze it\n    return {\n        confidenceScore: 0.76,\n        assessment: \"This content contains a mix of factual and misleading information\",\n        details: [\n            {\n                point: \"Multiple claims are not supported by reliable sources\",\n                confidence: 0.82\n            },\n            {\n                point: \"Some statistics are presented out of context\",\n                confidence: 0.79\n            },\n            {\n                point: \"Article contains credible information but lacks important context\",\n                confidence: 0.68\n            }\n        ]\n    };\n}\n// File verification function\nasync function verifyFile(file) {\n    // In a real app, you would analyze the file based on its type\n    const fileType = file.mimetype;\n    // For now, return mock data\n    return {\n        confidenceScore: 0.92,\n        assessment: \"This content appears to be highly factual and accurate\",\n        details: [\n            {\n                point: \"All key claims are verified by reliable sources\",\n                confidence: 0.95\n            },\n            {\n                point: \"Content presents balanced viewpoints\",\n                confidence: 0.89\n            },\n            {\n                point: \"Data is recent and accurately represented\",\n                confidence: 0.93\n            }\n        ]\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/verify.ts\n");

/***/ }),

/***/ "formidable":
/*!*****************************!*\
  !*** external "formidable" ***!
  \*****************************/
/***/ ((module) => {

module.exports = import("formidable");;

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fverify&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fverify.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();